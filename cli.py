#!/usr/bin/env python3"""cli.py — Minimal command-line interface for SpongeKitPurpose-------Run SpongeKit headlessly (no Streamlit) and save a CSV of scenario results.Usage examples--------------# Depth storm (simple)python cli.py run --place "Amsterdam, Netherlands" --tile-km 1.2 --storm-mm 50 \  --R-mm 20 --Cg 0.25 --C-roof 0.9 --unit-cost 150 --out outputs/ \  0.1 0.2 0.3# Hyetograph storm (CSV with minutes,mm_per_min)python cli.py run --place "Amsterdam, Netherlands" --tile-km 1.2 \  --hyetograph sample_hyetograph.csv --R-mm 20 --Cg 0.25 --C-roof 0.9 \  --unit-cost 150 --out outputs/ \  0.1 0.2 0.3"""from __future__ import annotationsimport sysfrom pathlib import Pathfrom typing import Optional, Listimport click# Import only what we need from the core packagefrom spongekit_core.config import build_config, ensure_foldersfrom spongekit_core.io import load_or_fetch_buildingsfrom spongekit_core.gis import prepare_buildingsfrom spongekit_core.scenarios import build_green_roof_scenario_tablefrom spongekit_core.rainfall import parse_hyetograph_csv@click.group()def main():    """SpongeKit CLI. Type `python cli.py run --help` for options."""    pass@main.command("run")@click.option("--place", required=True, help="Place name for OSM geocoding (e.g., 'Pune, India').")@click.option(    "--tile-km",    type=float,    default=1.0,    show_default=True,    help="Square tile size (km) around geocoded centre.",)@click.option(    "--storm-mm",    type=float,    default=None,    help="Event depth (mm). Use this for simple 'depth' mode.",)@click.option(    "--hyetograph",    type=click.Path(exists=True, dir_okay=False),    default=None,    help="CSV with columns minutes,mm_per_min for hyetograph mode.",)@click.option("--R-mm", "R_mm", type=float, default=20.0, show_default=True, help="Green roof storage (mm).")@click.option("--Cg", "Cg", type=float, default=0.25, show_default=True,              help="Green roof overflow runoff coeff (0..1).")@click.option("--C-roof", "C_roof", type=float, default=0.9, show_default=True, help="Baseline roof runoff coeff (0..1).")@click.option("--unit-cost", type=float, default=150.0, show_default=True, help="CAPEX unit cost (currency/m²).")@click.option(    "--out",    "out_dir",    type=click.Path(file_okay=False),    default="outputs",    show_default=True,    help="Output folder; will be created if missing.",)@click.argument("coverage", nargs=-1, type=float)def run_cmd(    place: str,    tile_km: float,    storm_mm: Optional[float],    hyetograph: Optional[str],    R_mm: float,    Cg: float,    C_roof: float,    unit_cost: float,    out_dir: str,    coverage: List[float],):    """    Run scenarios and write a CSV.    \b    COVERAGE: pass one or more fractions (0..1) as positional args at the end, e.g.:      0.1 0.2 0.3    """    # --- Validate arguments ---    if (storm_mm is None) == (hyetograph is None):        click.echo("ERROR: Provide exactly one of --storm-mm OR --hyetograph.", err=True)        sys.exit(1)    if not coverage:        click.echo("ERROR: Provide at least one coverage value at the end, e.g. 0.1 0.2 0.3", err=True)        sys.exit(1)    # Sanitize coverage values    fracs = []    for f in coverage:        if f <= 0 or f > 1:            click.echo(f"ERROR: coverage {f} must be in (0, 1].", err=True)            sys.exit(1)        fracs.append(float(f))    # --- Build config & folders ---    mode = "hyetograph" if hyetograph else "depth"    P_mm = float(storm_mm or 0.0)    cfg = build_config(place=place, tile_km=tile_km, storm_mm=P_mm)    ensure_folders(cfg)    # --- Parse hyetograph if needed ---    hyeto = None    if mode == "hyetograph":        try:            hyeto = parse_hyetograph_csv(hyetograph)            total_depth = sum(mm for _, mm in hyeto)            cfg.storm_mm = float(total_depth)  # for consistent reporting            click.echo(f"Hyetograph parsed: {len(hyeto)} steps, total depth ≈ {total_depth:.1f} mm")        except Exception as exc:            click.echo(f"ERROR: failed to parse hyetograph: {exc}", err=True)            sys.exit(1)    # --- Fetch + prepare buildings ---    try:        gdf_raw = load_or_fetch_buildings(cfg.bbox, cfg.cache_folder)    except Exception as exc:        click.echo(f"ERROR: fetching OSM buildings failed: {exc}", err=True)        sys.exit(1)    try:        bldgs = prepare_buildings(gdf_raw, cfg.crs_projected)    except Exception as exc:        click.echo(f"ERROR: preparing buildings failed: {exc}", err=True)        sys.exit(1)    if len(bldgs) == 0:        click.echo("No polygonal buildings found after preparation. Try a larger tile or different place.", err=True)        sys.exit(1)    # --- Run scenarios ---    try:        table = build_green_roof_scenario_table(            bldgs=bldgs,            P_mm=cfg.storm_mm,            C_roof=C_roof,            R_mm=R_mm,            Cg=Cg,            fracs=sorted(fracs),            mode=mode,            hyeto=hyeto,            unit_cost=unit_cost,        )    except Exception as exc:        click.echo(f"ERROR: running scenarios failed: {exc}", err=True)        sys.exit(1)    # --- Write CSV ---    out_path = Path(out_dir)    out_path.mkdir(parents=True, exist_ok=True)    csv_file = out_path / "spongekit_scenarios.csv"    try:        table.to_csv(csv_file, index=False)    except Exception as exc:        click.echo(f"ERROR: writing CSV failed: {exc}", err=True)        sys.exit(1)    click.echo(f"OK: wrote {csv_file.resolve()}")    # Tiny summary    if "reduction_pct" in table.columns and "coverage_frac" in table.columns:        best = table.sort_values("reduction_pct", ascending=False).iloc[0]        click.echo(            f"Top reduction ≈ {float(best['reduction_pct']):.1f}% at coverage {float(best['coverage_frac'])*100:.0f}%"        )if __name__ == "__main__":    main()